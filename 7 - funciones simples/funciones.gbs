//1
function cantidadDeBolitasTotales() {
    /*
        PROPÓSITO:  Describe la cantidad de bolitas totales en la celda actual
        TIPO: Número
        PRECONDICIONES:
            * Ninguna
    */
    
    return (
            nroBolitas(Azul)  +
            nroBolitas(Negro) +
            nroBolitas(Rojo)  +
            nroBolitas(Verde)
            )
}
//probamos asi
program{
    return (cantidadDeBolitasTotales())
}

//1b
function hayMasDe5EnTotal(){
    /*
    PROPÓSITO: indica si hay mas de cinco bolitas en la celda actual
    TIPO: booleano

    */
    return (cantidadDeBolitasTotales() > 5)
}
//1c
function hay5BolitasEnTotal(){
    /*
    PROPÓSITO: indica si hay cinco bolitas en total en la celda actual
    TIPO: booleano

    */
    return (cantidadDeBolitasTotales() == 5)
}
//1d
function hayAlMenosDe5EnTotal(){
    /*
    PROPÓSITO: indica si hay al menos de cinco bolitas en la celda actual
    TIPO: booleano

    */
    return (cantidadDeBolitasTotales() <= 5)
}
//1e
function hayBolitasDeTodosLosColores() {
    /*
        PROPÓSITO:  Indica si hay bolitas de todos los colores  en la celda actual
        TIPO: booleano
    */
    
    return (
            hayBolitas(Azul) &&
            hayBolitas(Negro) &&
            hayBolitas(Verde) &&
            hayBolitas(Rojo) 
            )
}
//1f ok
function esCeldaVacia() {
    /*
        PROPÓSITO:  Indica si la celda actual está vacia
        TIPO: booleano
    */
    
    return (not hayBolitasDeTodosLosColores())
            //ó
            // return (not (hayBolitas(Azul) ||  
            // not hayBolitas(Negro) || 
            // not hayBolitas(Verde) || 
            // not hayBolitas(Rojo)) )
}
//1g
function faltaAlgunaBolita() {
    /*
        PROPÓSITO:  Indica si le falta alguno de los colores
        TIPO: Booleano
    */
    
    return (
            (hayBolitas(Azul) ||  
            hayBolitas(Negro) || 
            hayBolitas(Verde) || 
            hayBolitas(Rojo) ) && 
            not esCeldaVacia()
            )
}
//2 biblioteca
//2a
function esCeldaVacia() {
    /*
        PROPÓSITO:  Indica si la celda actual está vacia
        TIPO: booleano
    */
    
    return (not hayBolitas(Azul) &&  
            not hayBolitas(Negro) && 
            not hayBolitas(Verde) && 
            not hayBolitas(Rojo) )
            //ó
            // return (not (hayBolitas(Azul) ||  
            // not hayBolitas(Negro) || 
            // not hayBolitas(Verde) || 
            // not hayBolitas(Rojo)) )
}
//2b
function tieneUnaDeCada() {
    /*
        PROPÓSITO:  Indica si la celda tiene al menos una bolita de cada color
        TIPO: booleano
    */
    
    return ( hayBolitas(Azul) &&  
             hayBolitas(Negro) && 
             hayBolitas(Verde) && 
             hayBolitas(Rojo) )
           
}
//2c
function esCeldaConBolitas() {
    /*
        PROPÓSITO:  Indica si la celda tiene al menos una bolita de cualquier color
        TIPO: booleano
    */
    
    return ( hayBolitas(Azul) || 
             hayBolitas(Negro) ||
             hayBolitas(Verde) ||
             hayBolitas(Rojo) )
           
}

//3 no corregido

// aliados bolitade color Negro
// enemigos bolita de color Rojo por cada soldado
function cantidadDeSoldadosDe_(colorDelEjército()) {           

    /*
        PROPÓSITO:  Describe la cantidad de soldados del ejercito *colorDelEjército* en la celda actual.
        TIPO: Número
        PARÁMETRO:
            *colorDelEjército: Color - Indica el color del ejército.
    */
    
    return (nroBolitas(colorDelEjército))
}
//3b
procedure EnviarAliadosParaDuplicarEnemigos() {
    /*
        PROPÓSITO: agrega soldados aliados en la celda actual
                     en cantidad suficiente para que haya el doble de aliados que de soldados enemigos.
        PRECONDICIONES:
            * Debe haber al menos un soldado enemigo en la celda actual.
        OBSERVACIONES:
            *Un soldado se representa con una bolita Negra
            *Un enemigo se representa con una bolita Roja
    */
    repeat (cantidadDeSoldadosDe_(Rojo)) {
        Poner(Negro) * 2
    }
}

procedure PelearLaBatalla() {
    /*
        PROPÓSITO:  Simula una batalla
        PRECONDICIONES:Debe haber al menos 2 senemiagos y 3 aliados
            
    */
    repeat(cantidadDeSoldadosDe_(Rojo) div 2 * 3){ //9
        Sacar(Negro) 
    }
     
     repeat(cantidadDeSoldadosDe_(Rojo)){ //6
        Sacar(Rojo) 
    } 
    
}

//3c
function esCeldaIndefensa() {
    /*
        PROPÓSITO:  Indica si la celda se encuentra indefensa, sin soldados
        TIPO: Booleano
    */
    
    return ((cantidadDeSoldadosDe_(Negro) + cantidadDeSoldadosDe_(Rojo)) == 0)
}

//3d
function estadoDeEmergencia() {
    /*
        PROPÓSITO:  indica si existen más de 100 soldados enemigos, y además la                         
                    celda está indefensa.
        TIPO: Booleano
    */
    
    return (cantidadDeSoldadosDe_(Rojo) > 100 && esCeldaIndefensa())
}
//3e
function hayAlMenos_AliadosPorCada_Atacantes(cantidadDefensa, cantidadAtaque) {
    /*
        PROPÓSITO:  Indica si hay por lo menos ​cantidadDefensa soldados aliados por cada                       
                    cantidadAtaque soldados enemigos en la celda actual
        TIPO: Booleano
    */
    
    return (cantidadDefensa == cantidadAtaque * 2)
}
//3f
function aliadosNecesariosParaDefensaEficazContra_(cantidadDeSoldadosEnemigosAdicionales) {
    /*
        PROPÓSITO: escribe el número de soldados aliados que faltan para defender la celda actual 
        si a ella se suman la cantidad de soldados enemigos dada
        TIPO: Número
        PRECONDICIÓN: No hay sufiencientes aliados.
    */
    //2 soldados enemigos y 3 aliados

    return (cantidadDeSoldadosEnemigosAdicionales * 3 div 2 )
}
//4 corregido
function sePuedeAterrizarA_Hacia_(distanciaAPlaneta, direcciónAPlaneta) {
    /*
        PROPÓSITO:  Indica si hay un planeta a *distanciaAPlaneta* en la dirección *direcciónAPlaneta*
        TIPO: Booleano
        PARÁMETROS:
            *distanciaAPlaneta: Número -  cantidad de la celdas de distancia
            *direcciónAPlaneta: dirección - direccion hacia donde se encuentra el planeta
        PRECONDICIONES: 
            *El cabezal se debe encontrar sobre la nave.
            *Debe haber al menos *distaciaAPlaneta* en dirección *direcciónAPlaneta*
    */
    
    return (hayUnPlaneta)
}

//4bok
function hayUnPlanetaRecto() {
    /*
        PROPÓSITO:  Indica si existe un planeta en cualquiera de las direcciones,
                    a cualquier distacia.
       
        TIPO: Booleano
        PRECONDICIONES:
            * La nave se encuentra a 3 celdas de distacia de los bordes
    */
    
    return (hayUnPlanetaRectoHaciaEl_(Norte) ||
    hayUnPlanetaRectoHaciaEl_(Este) ||
    hayUnPlanetaRectoHaciaEl_(Sur) ||
    hayUnPlanetaRectoHaciaEl_(Norte))
}
//ok
function hayUnPlanetaRectoHaciaEl_(dirección) {
    /*
        PROPÓSITO: Indica si existe un planeta en dirección al *dirección*,
                a 3 celdas o menos de distancia
        PARÁMETROS:
            * dirección: Dirección - La dirección hacia donde buscaremos el planeta.
        TIPO: Booleano
        PRECONDICIONES:
            *El cabezal se encientra sobre la nave
            *debe haber al menos 3 celdas al *direccion* desde la celda actual
    */
    
    return (hayUnPlanetaA_Hacia_(1 , dirección)||
    hayUnPlanetaA_Hacia_(2 , dirección)
    hayUnPlanetaA_Hacia_(3 , dirección))
}
//5a
procedure GerminarSemilla() {
    /*
        PROPÓSITO:  Germinar Semilla
        PRECONDICIONES:
            * ....
    */

    
    
}
function haySemilla() {
    /*
        PROPÓSITO:  Germinar Semilla
        TIPO: Tipo
       
    */
    return ()
}

//d ok
procedure Polinizar(){
    /*
    PROPÓSITO: Polinaza la celda lindante al Este con la cantidad de semillas dada 
                por la cantidad de árboles de la celda actual menos 3
    PRECONDICIONES: Ninguna.

    */
    if(PuedePolinizar()){
        Poner_SemillasAl_(cantidadDeárboles-3, Este)
    }

}

function PuedePolinizar() {
    /*
        PROPÓSITO: Indica si se puede polinzar la celda lindante al este
        TIPO: Boolenao
        PRECONDICIONES:
            *Ninguna
    */
    
    return (puedeMover(Este) && cantidadDeárboles > 3)
}

function cantidadDeárboles() {
    /*
        PROPÓSITO: Describe la cantidad de árboles
        TIPO: Número
    */
    
    return (nroBolitas(Verde))
}

procedure Poner_SemillasAl_(cantidadDeSemillas, dirección){
    /*
    PROPÓSITO: Pone cantidadDeSemillas semillas en la celda lindante al direccion
    PARÁMETROS:
        *cantidadDeSemillas: numero - la cantidad de semillas a poner
        *dirección: direccion. direccion hacua la cual poner semillas
    PRECONDICIONES: Debe haber una celda lindante al *direccion*

    */
    Mover(dirección)
    Poner_semillas(cantidadDeSemillas)// Poner_DeColor(cantidadDeSemillas, Rojo)
}


//6 ok
function pesos(){
    /*
        PROPÓSITO: Describe el color con el que se representan los pesos.
        Tipo: Color.
    */
    return(Negro)
}

function euros(){
    /*
        PROPÓSITO: Describe el color con el que se representan los euros.
        Tipo: Color.
    */
    return(Azul)
}

function ahorrosEn_(moneda) {
    /*
        PROPÓSITO:  Describe la cantidad de unidades de *moneda* que 
                    hay en la cuenta
        PARÁMETROS:
            * moneda: Color - Describe la moneda.
        TIPO: Número
        
    */
    
    return (nroBolita(moneda))
}

function cuantosDolaresSePuedenComprarCon_Pesos(cantidadDePesos){
    /*
        PROPÓSITO: Describe la cantidad de dólares que se pueden
                comprar con *cantidadDePesos*
        PARÁMETROS: 
            *cantidadDePesos: Número - la cantidad de pesos a cotizar
        TIPO: Número
    */
    //primero consultamos cuanto esta el dolar
    return(cantidadDePesos div cotizaciónDolarVenta())
}

function cotizaciónDolarVenta() {
    /*
        PROPÓSITO:  Describe la cotizavción de una unidad de dolár
                    para la venta.
        TIPO: Número
       
    */
    return (275)
}

function cuantosPesosSiVendo_Dólares(cantidadDeMonedaExtranjera){
    /*
        PROPÓSITO: Describe la cantidad de pesos que se pueden
                comprar con *cantidadDeMonedaExtranjera*
        PARÁMETROS: 
            *cantidadDeMonedaExtranjera: Número - la cantidad de 
                            dólares a cotizar
        TIPO: Número
    */
    return(cotizaciónDolarCompra() *cantidadDeMonedaExtranjera )
}
function cotizaciónDolarCompra() {
    /*
        PROPÓSITO:  Describe la cotizavción de una unidad de dolár
                    para la compra.
        TIPO: Número
       
    */
    return (270)
}

