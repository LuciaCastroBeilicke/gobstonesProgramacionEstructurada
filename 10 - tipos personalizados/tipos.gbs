//1

type DíaDeLaSemana is variant {
    case Lunes {}
    case Martes {}
    case Miercoles {}
    case Jueves {}
    case Viernes {}
    case Sabado {}
    case Domingo {}
}

function díaSiguiente_(día) {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */
    return (choose
        Martes      when (día == Lunes)
        Miercoles   when (día == Martes)
        Jueves      when (día == Miercoles)
        Viernes     when (día == Jueves)
        Sabado      when (día == Viernes)
        Domingo     when (día == Sabado)
        Lunes otherwise
    )
}

function díaPrevio_(día) {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */
    return ()
}

function esDíaDeFinDeSemana_(día) {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */
    
    return (día == Sabado || día == Domingo)
}

//3
type Palo is variant {
    case Oro {}
    case Basto {}
    case Espada {}
    case Copa {}
}

type Carta is record {
    field número //Número
    field palo 
}

function anchosDeEspada(){
        /*
            PROPÓSITO:  Describe la carta 1 de espadas .
            TIPO: Carta
            PRECONDICIONES:
                * Ninguna.
        */
    return(
        Carta(número <- 1, palo <- Espada)
        )
}

function laCarta_de_(número, palo) {
    /*
        PROPÓSITO:  Describe la carta con número *número* y palo *palo*
        PARÁMETROS:
            * número: Número - descripción.
            * palo: Palo - descripción.
        TIPO: Carta
        PRECONDICIONES:
            * *número* debe estar entre 1 y 7 o 10 y 12
    */
    
    return ( Carta(número <- número, palo <- palo))
}

/*
type record 
propósito: modelar x cosa
Invariante de representacion: es como la precondicion
    *el modelo debe ser un numero entre msyor a .. menos a...
type variant
solo tiene proposito
*/

function esFordNegro( autoAEvaluar) {
    /*
        PROPÓSITO:  indica si el *autoAEvaluar* es ford negro
        PARÁMETROS:
            * autoAEvaluar: Auto - Describe el auto a evaluar.
        TIPO: booleano
        PRECONDICIONES:
            * ninguna
    */
    //funciones observadoras
    return (
        marca(autoAEvaluar) == Ford &&
        colorDeAuto(autoAEvaluar) == Negro
    )
}

program {
  return (esFordNegro(Auto(marca <- Audi,
                       colorDeAuto <- Azul,
                            modelo <- 2020 )
                    )
        ) //returns false
}