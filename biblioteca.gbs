//3 NO CORREGIDO BIBLIOTECA (PROCEDIMIENTOS 2)
procedure PonerUnaDeCada(){
     /*
    	PRÓPOSITO: Poner una bolita de cada color en la celda actual.
    	PRECONDICIONES: Ninguna.
    */
    Poner(Azul)
    Poner(Verde)
    Poner(Rojo)
    Poner(Negro)
}
//9 NO CORREGIDO BIBLIOTECA (PARÁMETROS 4)
procedure Poner_DeColor_(cantidadAPoner, colorAPoner){
    /*
        PROPÓSITO:  Poner *cantidadAPoner* bolitas de color *colorAPoner*
        PARÁMETROS:
            * cantidadAPoner: Número - Indica la cantidad de bolitas a poner.
            * colorAPoner: Color - Indica el color de la bolita  a poner.
        PRECONDICIONES:
            * Ninguna
    */
    repeat (cantidadAPoner) {
        Poner(colorAPoner)
    }
}

//10 NO CORREGIDO BIBLIOTECA (PARÁMETROS 4)

procedure Mover_VecesAl_(cantidadAMover, direcciónAMover){
    /*
        PROPÓSITO:  Mover el cabezal *cantidadAMover* celdas al *direcciónAMover*
        PARÁMETROS:
            * cantidadAMover: Número - Indica la cantidad de celdas a mover el cabezal.
            * direcciónAMover: Dirección - Indica la direccion hacia la cual se moverá el cabezal.
        PRECONDICIONES:
            * Debe haber, al menos, *cantidadAMover* celdas al *direcciónAMover*
    */
    repeat (cantidadAMover) {
        Mover(direcciónAMover)
    }
}

//11 NO CORREGIDO BIBLIOTECA (PARÁMETROS 4)
procedure Sacar_DeColor_(cantidadASacar, colorASacar){
    /*
        PROPÓSITO:  Sacar *cantidadASacar* bolitas de color *colorASacar*
        PARÁMETROS:
            * cantidadASacar: Número - Indica la cantidad de bolitas a sacar.
            * colorASacar: Color - Indica el color de la bolita  a sacar.
        PRECONDICIONES:
            * Debe haber al menos *cantidadASacar* bolitas en la celda actual.
    */
    repeat (cantidadASacar) {
        Poner(colorASacar)
    }
}

//6 no corregido BIBLIOTECA (EXPRESIONES 5)
procedure SacarTodasLasDeColor_(colorASacar){
    /*
        PROPÓSITO:  Saca todas las bolitas de la celda actual cuyo color sea *colorASacar*
        PARÁMETROS:
            * colorASacar: Color - Indica el color a sacar.
        PRECONDICIONES:
            * Debe haber al menos una bolita de color *colorASacar* en la celda actual.
    */
    Sacar_DeColor_(nroBolitas(colorASacar),colorASacar )
    
}

//4 corregido(alternativa 6)
//a ok
procedure Poner_Si_(color,condición){
    /*
        PROPÓSITO: Poner bolita de color *color* en la celda actual si se cumpple la condicion *condicion*
        PARÁMETROS: 
            *color - Color. Representa el color
            *condición - Booleano. Representa la condicion que se debe poner cumplir par aponer la bolita
        PRECONDICIONES: ninguna

    */
    if(condicion){
        Poner(color)
    }
}
//b ok
procedure Sacar_Si_(color,condición){
    /*
        PROPÓSITO: Sacar bolitas de color *color* si se cumple *condicion*
        PARÁMETROS: 
            *color - Color. Representa el color
            *condición - Booleano. Representa la condicion
        PRECONDICIONES: en el caso que se cumpla la condicion *condicion*, debe haber una bolita *color*.

    */
    if(condicion){
        Sacar(color)
    }
}
//c
procedure Mover_Si_(dirección,condición){
    /*
        PROPÓSITO: Mover hacia *direccion* si se cumple *condicion*
        PARÁMETROS: 
            *dirección - dirección. Representa la dirección hacia donde se moverá el cabezal
            *condición - Booleano. Representa la condicion
        PRECONDICIONES: Debe haber al menos una celda hacia el *direccion* si se cumple la condicion *condicion*

    */
    if(condicion){
        Mover(dirección)
    }
}

//2 NO CORREGIDO biblioteca (FUNCIONES 7)
//2a
function esCeldaVacia() {
    /*
        PROPÓSITO:  Indica si la celda actual está vacia
        TIPO: booleano
    */
    
    return (not hayBolitas(Azul) &&  
            not hayBolitas(Negro) && 
            not hayBolitas(Verde) && 
            not hayBolitas(Rojo) )
            //ó
            // return (not (hayBolitas(Azul) ||  
            // not hayBolitas(Negro) || 
            // not hayBolitas(Verde) || 
            // not hayBolitas(Rojo)) )
}
//2b
function tieneUnaDeCada() {
    /*
        PROPÓSITO:  Indica si la celda tiene al menos una bolita de cada color
        TIPO: booleano
    */
    
    return ( hayBolitas(Azul) &&  
             hayBolitas(Negro) && 
             hayBolitas(Verde) && 
             hayBolitas(Rojo) )
           
}
//2c
function esCeldaConBolitas() {
    /*
        PROPÓSITO:  Indica si la celda tiene al menos una bolita de cualquier color
        TIPO: booleano
    */
    
    return ( hayBolitas(Azul) || 
             hayBolitas(Negro) ||
             hayBolitas(Verde) ||
             hayBolitas(Rojo) )
           
}

//REPETICION CONDICIONAL EJ6
//6a BIBLIOTECA NO corregido
procedure IrAPrimeraCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROPÓSITO: Ubicar el cabezal en un recorrido hacia la direccion
                    *dirPrincipal* y al *dirSecundaria*
        PARÁMETROS:
            * dirPrincipal: Dirección - la dirección principal del recorrido.
            * dirSecundaria: Dirección - la dirección secundaria del recorrido.
        PRECONDICIONES:
            * La dirección *dirPrincipal* y la *dirSecundario* no pueden ser iguales ni iouestas
    */
  IrAlBorde(opuesto(dirPrincipal))
  IrAlBorde(opuesto(dirSecundaria))
}

//6b BIBLIOTECA NO corregdo
function haySiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROPÓSITO:  Indica si hay siguiente celda en un recorrido hacia la *dirPrincipal*
                    y *dirSecundario*
        PARÁMETROS:
            * dirPrincipal: Dirección - la dirección principal del recorrido.
            * dirSecundaria: Dirección - la dirección secundaria del recorrido.
        TIPO: Booleano
        PRECONDICIONES: 
            * La dirección *dirPrincipal* y la *dirSecundario* no pueden ser iguales ni iouestas 
    */
    return (puedeMover(dirPrincipal) || puedeMover(dirSecundaria))
}

//6c
procedure IrASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    /*
        PROPÓSITO:  Mueve la cabezal a la celda siguiente en *dirPrincipal* y *dirSecundaria*
        PARÁMETROS:
            * dirPrincipal: Dirección - descripción.
            * dirSecundaria: Dirección - descripción.
        PRECONDICIONES: 
            * La dirección *dirPrincipal* y la *dirSecundario* no pueden ser iguales ni iouestas  
            * Debe haber una celda siguiente en el recorrido
    */
   if(puedeMover(dirPrincipal)){
    Mover(dirPrincipal)
   }else{
    IrAlBorde(opuesto(dirPrincipal))
    Mover(dirSecundaria)
   }
}
// 9 variables
//2 BIBLIOTECA OK
function hayBolitas_Al_(color, dirección){
    /*
        PROPÓSITO: Indica si hay bolitas de color *color* en 
            la celda lindante
        PRECONDICION: Ninguna
        PARÁMETROS:
            *color: Color. Indica el color de la bolita a buscar
            *dirección: Dirección. Indica la direccion

    */
    return(puedeMover(dirección) && tieneBolitas_Al_(color, dirección))

}
//11 BIBLIOTECA
function mínimoEntre_Y_(primerNúmero, segundoNúmero){
    /*
        PRPÓSTIO: Describe l numero minimo entre *primer* y *segundo*
        PRECONDICIONES: Ninguna.
        TIPO: número
        PARÁMETROS:
        *primerNúmero: Número. EL primer número a comparar
        *segundoNúmero: Número. El primero numero a comparar
    */
    //forma 1
    númeroMínimo := 0
    if(primerNúmero>segundoNúmero){
        númeroMínimo:= primerNúmero
    }else{
        númeroMínimo := segundoNúmero
    }
    return(númeroMínimo)
    //forma 2
    //cuando necesitamos usar alt en la funcion usar choose
    return(choose
        primerNúmero when (primerNúmero<segundoNúmero)
        segundoNúmero otherwise
    )
}
//12ok BIBLIOTECA
function máximoEntre_Y_(primerNúmero, segundoNúmero){
    /*
        PRPÓSTIO: Describe l numero maximo entre *primer* y *segundo*
        PRECONDICIONES: Ninguna.
        TIPO: número
        PARÁMETROS:
        *primerNúmero: Número. EL primer número a comparar
        *segundoNúmero: Número. El primero numero a comparar
    */
    //forma 1
    númeroMáximo := 0
    if(primerNúmero>segundoNúmero){
        númeroMáximo:= primerNúmero
    }else{
        númeroMáximo := segundoNúmero
    }
    return(númeroMáximo)
    //forma 2
    //cuando necesitamos usar alt en la funcion usar choose
    return(choose
        primerNúmero when (primerNúmero>segundoNúmero)
        segundoNúmero otherwise
    )
}
//17 ok BIBLIOTECA
function distanciaAlBorde_( dirección) {
    /*
        PROPÓSITO:  Describe la cantidad de celdas que hay desde la celda actual y el bode en direccion *direccion*
        PARÁMETROS:
            * dirección: Dirección - descripción.
        TIPO: Numero
        PRECONDICIONES:
            * Ninguna
    */
    distanciaAlBorde := 0
    while (puedeMover(dirección)) {
        Mover(dirección)
        distanciaAlBorde := distanciaAlBorde + 1
    }
    return (distanciaAlBorde)
}
//18 ok BIBLIOTECA
function coordenadaX() {
    /*
        PROPÓSITO:  Describe la coordenada X donde se encuentra el cabezal
        TIPO: número
        PRECONDICIONES:
            * Ninguna
    */
    return(distanciaAlBorde_(Oeste))
    
}
function coordenadaY() {
    /*
        PROPÓSITO:  
        TIPO: Número
        PRECONDICIONES:
            * 
    */
        return(distanciaAlBorde_(Sur))

}
//19 ok BIBLIOTECA
function nroFilas() {
    /*
        PROPÓSITO:  Describe el nro de filas del tablero
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Número
        PRECONDICIONES:
            * ....
    */
    IrAlBorde(Norte)
    return (distanciaAlBorde_(Sur) +1)

    //ó
    //return(distanciaAlBorde_(Sur) + distanciaAlBorde_(Norte))
}

//20 ok BIBLIOTECA
function nroVacias(){
    /*
        PROPÓSITO:  Describe el nro de celdas vacias en el tablero
         TIPO: Número
        PRECONDICIONES:
            * Ninguna
        OBSERVACIONES: recorrido de acumulacion contando las celdas vacias del tablero
    */
    IrAlInicioDeUnRecorridoAl_YAl_(Este, Norte)
    celdasVaciasVistas := unoSi_CeroSino(esCeldaVacia())
    while(haySiguienteCeldaEnUnRecorridoAl_YAl_(Este, Norte))
    {
        // if (esCeldaVacia()) {
        //     celdasVaciasVistas := celdasVaciasVistas +1
        // }
        //otra forma:
        //cantidadCeldasVacias := unaFuncion()

        
        IrAlInicioDeUnRecorridoAl_YAl_(Norte,Este)
        //usar
        cantidadCeldasVacias := cantidadCeldasVacias + unoSi_CeroSino(esCeldaVacia())
    }
    return (cantidadCeldasVacias)

}

// function unaFuncion(cantidadCeldasVacias){
//     return(choose cantidadCeldasVacias +1 when esCeldaVacia()
//             cantidadCeldasVacias otherwise)
// }

 function unoSi_CeroSino(condicion){
    /*
        PROPÓSITO: Describe 1 si se cumple la condición *condición*
        TIPO: Número
        PARÁMETROS:
        * Condición: Booleano. Describe la condicion a evaluar
    */
     return(choose 1 when condicion
             0 otherwise)
}

//21
function cantidadDeCeldasConBolitasDeColor_(color) {
    /*
        PROPÓSITO:  Describe la cantidad de celdas con bolitas de color *color*
                    en el tablero
        PARÁMETROS:
            * color: Color - el color de la bolita.
        TIPO: Número
        PRECONDICIONES:
            * Ninguna
        ONSERVACION: recorrido de acumulacion
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    cantidadDeCeldas:= 0
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)) {
       
        cantidadDeCeldas := cantidadDeCeldas + unoSi_CeroSino(hayBolitas(color))
        
        
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
    return (cantidadDeCeldas)
}

//22 biblioteca ok
function nroBolitasTotalDeColor_(color) {
    /*
        PROPÓSITO:  Describe la cantidad de bolitas de color *color* en el tablero
        PARÁMETROS:
            * color: Color - el color de la bolita a contar.
        TIPO: Número
        PRECONDICIONES:
            * Ninguna
        ONSERVACION: recorrido de acumulacion
    */
    IrAlInicioDeUnRecorridoAl_YAl_(Este, Norte)
    cantidadDeBolitas:= 0
    while (haySiguienteCeldaEnUnRecorridoAl_YAl_(Este, Norte)) {
        if (hayBolitas(color)) {
            cantidadDeBolitas := cantidadDeBolitas + nroBolitas(color)
        }
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
    return (cantidadDeBolitas)
}
//25 
 function unoSi_CeroSino(condicion){
    /*
        PROPÓSITO: Describe 1 si se cumple la condición *condición*
        TIPO: Número
        PARÁMETROS:
        * Condición: Booleano. Describe la condicion a evaluar
    */
     return(choose 1 when (condicion)
             0 otherwise)
}