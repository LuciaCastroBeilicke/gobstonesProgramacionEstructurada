//funciones con procesamiento cuando quiero saber el valor de la celdas vecnias
//variables cuando queremos recordar un valor
//1
function tieneBolitas_Al_(color, dirección) {
    /*
        PROPÓSITO:  Indica si la celda lindante en dirección *dirección* tiene bolitas del color *color*.
        PARÁMETROS:
            * color: Color - Color de las bolitas.
            * dirección: Dirección - Dirección que debe desplazarse el cabezal.
        TIPO: Booleano.
        PRECONDICIONES:
            * Debe haber al menos una celda lindante al *dirección* de la celda actual.
        OBSERVACIONES: Recorrido de búsqueda.
    */
    Mover(dirección)
    return (hayBolitas(color))
}

//2 BIBLIOTECA OK
function hayBolitas_Al_(color, dirección){
    /*
        PROPÓSITO: Indica si hay bolitas de color *color* en 
            la celda lindante
        PRECONDICION: Ninguna
        PARÁMETROS:
            *color: Color. Indica el color de la bolita a buscar
            *dirección: Dirección. Indica la direccion

    */
    return(puedeMover(dirección) && tieneBolitas_Al_(color, dirección))

}
//3
function hayBolitas_EnElBorde_(color, dirección) {
    /*
        PROPÓSITO:  Indica si hay bolitas de color *color* 
        PARÁMETROS:
            * color: Color - descripción.
            * dirección: Dirección - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * Ninguna
    */
    IrAlBorde(dirección)
    return (hayBolitas(color))
}
//4
function hayBolitas_Hacia_(color, dirección) {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * color: tipo - descripción.
            * dirección: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */
    while(puedeMover(dirección) && not hayBolitas(color)){
        Mover(dirección)
    }
    return (hayBolitas(color))
}
//5
function hayCeldaVacíaHacia_(dirección) {
    /*
        PROPÓSITO:  Indica si hay en alguna celda vacia en dirección *dirección*, sin contar la celda actual.
        PARÁMETROS:
            * dirección: Dirección - Dirección que debe desplazarse el cabezal.
        TIPO: Booleano.
        PRECONDICIONES:
            * Debe haber al menos una celda en dirección *dirección* lindante de la celda actual.
        OBSERVACIONES: Recorrido de búsqueda.
    */
    Mover(dirección)
    while (puedeMover(dirección) && tieneUnaDeCada()) {
        Mover(dirección)
    }
    return (not hayBolitas(color))
}
//6 no cor
function hayAlgunaBolita_(color) {
    /*
        PROPÓSITO:  indica si hay alguna bolita de color *color* en alguna celda del tablero
        PARÁMETROS:
            * color: Color - el color de las bolitas.
        TIPO: Booleano
        PRECONDICIONES:
            * Ninguna
        OBSERVACIONES:
            *recorrido de búsqueda
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Sur, Oeste)
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Sur, Oeste) && not hayBolitas(color)) {
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Sur, Oeste)
    }
    return(hayBolitas(color))
}
//9 
//propuesto por un compañero:
procedure CopiarOrigenEnEsquina() {
    /*
        PROPÓSITO:  Copiar el contenido de la celda actual en las 4 esquinas del tablero
        PRECONDICIONES:
            * Ninguna
    */
    CopiarOrigenEnEsquina_(Este, Sur)
    CopiarOrigenEnEsquina_(Este, Norte)
    CopiarOrigenEnEsquina_(Oeste, Sur)
    CopiarOrigenEnEsquina_(Oeste, Norte)

}

procedure CopiarOrigenEnEsquina_(dirPpal, dirSec){
    cantidadAzules := nroBolitas(Azul)
    cantidadVerdes := nroBolitas(Azul)
    cantidadNegras := nroBolitas(Azul)
    cantidadRojas := nroBolitas(Azul)
    IrAlBorde(dirPpal)
    IrAlBorde(dirSec)
    VaciarCelda()
    Poner_DeColor_(cantidadAzules, Azul)
    Poner_DeColor_(cantidadVerdes, Verde)
    Poner_DeColor_(cantidadNegras, Negro)
    Poner_DeColor_(cantidadRojas, Rojo)

}

procedure VaciarCelda(){
    Sacar_DeColor(nroBolitas(Azul), Azul)
    Sacar_DeColor(nroBolitas(Verde), Verde)
    Sacar_DeColor(nroBolitas(Negro), Negro)
    Sacar_DeColor(nroBolitas(Rojo), Azul)

}
//11 BIBLIOTECA
function mínimoEntre_Y_(primerNúmero, segundoNúmero){
    /*
        PRPÓSTIO: Describe l numero minimo entre *primer* y *segundo*
        PRECONDICIONES: Ninguna.
        TIPO: número
        PARÁMETROS:
        *primerNúmero: Número. EL primer número a comparar
        *segundoNúmero: Número. El primero numero a comparar
    */
    //forma 1
    númeroMínimo := 0
    if(primerNúmero>segundoNúmero){
        númeroMínimo:= primerNúmero
    }else{
        númeroMínimo := segundoNúmero
    }
    return(númeroMínimo)
    //forma 2
    //cuando necesitamos usar alt en la funcion usar choose
    return(choose
        primerNúmero when (primerNúmero<segundoNúmero)
        segundoNúmero otherwise
    )
}
//12ok BIBLIOTECA
function máximoEntre_Y_(primerNúmero, segundoNúmero){
    /*
        PRPÓSTIO: Describe l numero maximo entre *primer* y *segundo*
        PRECONDICIONES: Ninguna.
        TIPO: número
        PARÁMETROS:
        *primerNúmero: Número. EL primer número a comparar
        *segundoNúmero: Número. El primero numero a comparar
    */
    //forma 1
    númeroMáximo := 0
    if(primerNúmero>segundoNúmero){
        númeroMáximo:= primerNúmero
    }else{
        númeroMáximo := segundoNúmero
    }
    return(númeroMáximo)
    //forma 2
    //cuando necesitamos usar alt en la funcion usar choose
    return(choose
        primerNúmero when (primerNúmero>segundoNúmero)
        segundoNúmero otherwise
    )
}
//13ok
function direcciónDelCódigo( código) {
    /*
        PROPÓSITO:  Describe la direccion correspondiente al codigo dado.
        PARÁMETROS:
            * código: tipo - descripción.
        TIPO: Dirección
        PRECONDICIONES:
            * El código debe estar entre 1 y 4
    */
    
    return (choose
        Norte when (código == 1)
        Este when (código == 2)
        Sur when (código == 3)
        Oeste otherwise
    )
}

//17 ok BIBLIOTECA
function distanciaAlBorde_( dirección) {
    /*
        PROPÓSITO:  Describe la cantidad de celdas que hay desde la celda actual y el bode en direccion *direccion*
        PARÁMETROS:
            * dirección: Dirección - descripción.
        TIPO: Numero
        PRECONDICIONES:
            * Ninguna
    */
    distanciaAlBorde := 0
    while (puedeMover(dirección)) {
        Mover(dirección)
        distanciaAlBorde := distanciaAlBorde + 1
    }
    return (distanciaAlBorde)
}

//18 ok BIBLIOTECA
function coordenadaX() {
    /*
        PROPÓSITO:  Describe la coordenada X donde se encuentra el cabezal
        TIPO: número
        PRECONDICIONES:
            * Ninguna
    */
    return(distanciaAlBorde_(Oeste))
    
}
function coordenadaY() {
    /*
        PROPÓSITO:  
        TIPO: Número
        PRECONDICIONES:
            * 
    */
        return(distanciaAlBorde_(Sur))

}
//19 ok BIBLIOTECA
function nroFilas() {
    /*
        PROPÓSITO:  Describe el nro de filas del tablero
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Número
        PRECONDICIONES:
            * ....
    */
    IrAlBorde(Norte)
    return (distanciaAlBorde_(Sur) +1)

    //ó
    //return(distanciaAlBorde_(Sur) + distanciaAlBorde_(Norte))
}

//20 ok BIBLIOTECA
function nroVacias(){
    /*
        PROPÓSITO:  Describe el nro de celdas vacias en el tablero
         TIPO: Número
        PRECONDICIONES:
            * Ninguna
        OBSERVACIONES: recorrido de acumulacion contando las celdas vacias del tablero
    */
    IrAlInicioDeUnRecorridoAl_YAl_(Este, Norte)
    celdasVaciasVistas := unoSi_CeroSino(esCeldaVacia())
    while(haySiguienteCeldaEnUnRecorridoAl_YAl_(Este, Norte))
    {
        // if (esCeldaVacia()) {
        //     celdasVaciasVistas := celdasVaciasVistas +1
        // }
        //otra forma:
        //cantidadCeldasVacias := unaFuncion()

        
        IrAlInicioDeUnRecorridoAl_YAl_(Norte,Este)
        //usar
        cantidadCeldasVacias := cantidadCeldasVacias + unoSi_CeroSino(esCeldaVacia())
    }
    return (cantidadCeldasVacias)

}

// function unaFuncion(cantidadCeldasVacias){
//     return(choose cantidadCeldasVacias +1 when esCeldaVacia()
//             cantidadCeldasVacias otherwise)
// }

// function unoSi_CeroSino(condicion){
    /*
        PROPÓSITO: Describe 1 si se cumple la condición *condición*
        TIPO: Número
        PARÁMETROS:
        * Condición: Booleano. Describe la condicion a evaluar
    */
//     return(choose 1 when condicion
//             0 otherwise)
// }
//21 BIBLIOTECA no corregido
function cantidadDeCeldasConBolitasDeColor_(color){
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    celdasConBolitas := unoSi_CeroSino(hayAlgunaBolita(color))
    while (haySiguienteCeldaEnUnRecorridoAl_YAl_(Este, Norte) && hayAlgunaBolita(color) ) {
        celdasConBolitas := celdasConBolitas + unoSi_CeroSino(hayAlgunaBolita(color))
    }
    return (celdasConBolitas)
}

//22 biblioteca ok
function nroBolitasTotalDeColor_(color) {
    /*
        PROPÓSITO:  Describe la cantidad de bolitas que hay en todo el tablero de color *color*
        PARÁMETROS:
            * color: Color - Describe el color de las bolitas a contar.
        TIPO: Número
        PRECONDICIONES:
            * Ninguna
    */
     IrAlInicioDeUnRecorridoAl_YAl_(Este, Norte)
    celdasVaciasVistas := unoSi_CeroSino(esCeldaVacia())
    while(haySiguienteCeldaEnUnRecorridoAl_YAl_(Este, Norte))
    {
        // if (esCeldaVacia()) {
        //     celdasVaciasVistas := celdasVaciasVistas +1
        // }
        //otra forma:
        //cantidadCeldasVacias := unaFuncion()

        
        IrAlInicioDeUnRecorridoAl_YAl_(Norte,Este)
        //usar
        cantidadCeldasVacias := cantidadCeldasVacias + unoSi_CeroSino(esCeldaVacia())
    }
    return (cantidadCeldasVacias)
    return ()
}
//25 OK BIBLIOTECA
 function unoSi_CeroSino(condicion){
    /*
        PROPÓSITO: Describe 1 si se cumple la condición *condición*
        TIPO: Número
        PARÁMETROS:
        * Condición: Booleano. Describe la condicion a evaluar
    */
     return(choose 1 when condicion
             0 otherwise)
 }

//27 recorridos sobreenumeraticos ok
procedure PonerUnaDeCadaColor(){
    color := minColor()
    while (siguiente(color) /= minColor()) {
        Poner(color)
        color := siguiente(color)
    }
    Poner(color)
}

//21
function cantidadDeCeldasConBolitasDeColor_(color) {
    /*
        PROPÓSITO:  Describe la cantidad de celdas con bolitas de color *color*
                    en el tablero
        PARÁMETROS:
            * color: Color - el color de la bolita.
        TIPO: Número
        PRECONDICIONES:
            * Ninguna
        ONSERVACION: recorrido de acumulacion
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    cantidadDeCeldas:= 0
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)) {
       
        cantidadDeCeldas := cantidadDeCeldas + unoSi_CeroSino(hayBolitas(color))
        
        
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
    return (cantidadDeCeldas)
}

//22 biblioteca ok
function nroBolitasTotalDeColor_(color) {
    /*
        PROPÓSITO:  Describe la cantidad de bolitas de color *color* en el tablero
        PARÁMETROS:
            * color: Color - el color de la bolita a contar.
        TIPO: Número
        PRECONDICIONES:
            * Ninguna
        ONSERVACION: recorrido de acumulacion
    */
    IrAlInicioDeUnRecorridoAl_YAl_(Este, Norte)
    cantidadDeBolitas:= 0
    while (haySiguienteCeldaEnUnRecorridoAl_YAl_(Este, Norte)) {
        if (hayBolitas(color)) {
            cantidadDeBolitas := cantidadDeBolitas + nroBolitas(color)
        }
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
    return (cantidadDeBolitas)
}
//25 
 function unoSi_CeroSino(condicion){
    /*
        PROPÓSITO: Describe 1 si se cumple la condición *condición*
        TIPO: Número
        PARÁMETROS:
        * Condición: Booleano. Describe la condicion a evaluar
    */
     return(choose 1 when (condicion)
             0 otherwise)
}
//29 ok
function direcciónHaciaLaCualHayBolitasDe_(color){
    /*
        PROPÓSITO: describe la dirección hacia la cual hay bolitas de color *color*
        PRECONDICIONES: Debe haber solo una celda con bolitas de color *color* en 
                        en una de las direcciones a mirar
        PARÁMETROS: color. Indica el 
        TIPO: direccion
    */
    direcciónAMover := minDir()
    while (not hayBolitas_Al_(color, direcciónAMover)) {
        direcciónAMover := siguiente(direcciónAMover)
    }
    return(direcciónAMover)
}

function cantidadDeVecinasConBolitas(){
    /*
        PROPÓSITO: describe la cantidad de celdas vecinas que contienen bolitas ( de cualquier color )
        PRECONDICIONES:Ninguna
        TIPO: numero
        OBSERVACIONES: recorrido sobre enumerativos, contando las
                        celdas vecinas con bolitas
    */
    cantidadConBolitas := 0
    direcciónAMover := minDir()
    while (direcciónAMover /= maxDir()) {
        cantidadConBolitas := cantidadConBolitas + 
        unoSi_CeroSino(hayBolitasAl_(direcciónAMover) && hayBolitas_Al_(direcciónAMover, siguiente(direcciónAMover)) )
    }
    return()
}


function hayÁrbol() {
    return (haybolitas(Verde))
}
function árbol(){
    return(Verde)
}
function cantidadTotalDeÁrbolesEnElTerreno() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */
    IrAlInicioDeUnRecorridoAl_YAl_(Este, Norte)
    cantidadDeÁrboles:= 0
     while (haySiguienteCeldaEnUnRecorridoAl_YAl_(Este, Norte)) {
       
        cantidadDeÁrboles := cantidadDeÁrboles + nroBolitasTotalDeColor_(árbol)
        
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
    return (cantidadDeÁrboles)
    
}
//39 no corregido

function cantidadDePistasLibres(){
    /*
        PROPÓSITO:  Describe la cantidad pistas libres
        TIPO: Número
        PRECONDICIONES:
            * Ninguna
        ONSERVACION: recorrido de acumulacion
    */
    //PISTA LIBRE: NO HAY AVIONES NI AZUL NI VERDE. PISTA ES COLUMNA
    IrAlInicioDeUnRecorridoAl_YAl_(Este, Norte)
    cantidadDePistasLibres:= 0
     while (haySiguienteCeldaEnUnRecorridoAl_YAl_(Este, Norte)) {
       
        cantidadDePistasLibres := cantidadDePistasLibres + unoSi_CeroSino(esPistaLibre())
        
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
    return (cantidadDePistasLibres)
}

function esPistaLibre(){
    IrAlBorde(Sur)
    while(hayCeldaVacíaHacia_(norte) && 
        (not aviónDespegando() || not aviónAterrizando()){
            Mover(Norte)
    }
    return(true)
}
distanciaAlBorde_
function coordenadaX() {
    /*
        PROPÓSITO:  Describe la coordenada X donde se encuentra el cabezal
        TIPO: número
        PRECONDICIONES:
            * Ninguna
    */
    return(distanciaAlBorde_(Oeste))
    
}
function cantidadDeAvionesDespegando(){
    //verde
    IrAlInicioDeUnRecorridoAl_YAl_(Este, Norte)
    cantidadDeAvionesDespegando:= 0
     while (haySiguienteCeldaEnUnRecorridoAl_YAl_(Este, Norte)) {
       
        cantidadDeAvionesDespegando := cantidadDeAvionesDespegando + unoSi_CeroSino(hayAviónDespegando())
        
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
    return (cantidadDeAvionesDespegando)
}

function hayAviónDespegando(){
    return(hayBolitas(Verde))
}


function aviónDespegando(){
    return(Verde)
}
function aviónAterrizando(){
    return(Rojo)
}

//min 40 del video