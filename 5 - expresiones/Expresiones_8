program {
    //EscribirHola()
    PasarPalabraActualAMayúsculas()
}

procedure EscribirHola() {
    /*
    PROPÓSITO: Escribe la palabra "hola", en minúscualas, codificada en ASCII,
        señalando la cantidad de letras de la palabra en el primer casillero.
    PRECONDICIONES: Debe haber al menos cuatro celdas al Este de la
        celda actual. Todas las celdas deben estar vacías de bolitas negras.
    OBSERVACIONES: La cantidad de letras se representan con bolitas rojas y
        cada letra se representa con bolitas negras.
    */
    Poner_DeColor_(4 , Rojo)
    Mover(Este)
    Poner_DeColor_(104 , Negro)
    Mover(Este)
    Poner_DeColor_(111 , Negro)
    Mover(Este)
    Poner_DeColor_(108 , Negro)
    Mover(Este)
    Poner_DeColor_(97 , Negro)
    repeat(4) {
        Mover(Oeste)
    }
    
}

procedure PasarPalabraActualAMayúsculas() {
    /*
    PROPÓSITO: A partir de una palabra en minúscula de la fila actual escribe en la fila 
        lindante al Norte la misma palabra en mayúscula.
    PRECONDICIONES: 
        *La palabra inicial debe estar escrita en codificación ASCII, completamente en 
            minúsculas.
        * Debe haber una fila vacía de letras al Norte respecto a la fila actual.
        * La celda actual debe contener la cantidad de letras que tiene la palabra.
        * La cantidad de letras de la palabra debe estar indicada con bolitas rojas.
    OBSERVACIONES: Las letras se representan mediante bolitas negras.
                   La cantidad de letras se representan mediante bolitas rojas.
    */
    repeat(nroBolitas(Rojo)) {
        Mover(Este)
        PasarLetra_AMayúsculaAlNorte(nroBolitas(Negro) - 32)
    }

}

procedure PasarLetra_AMayúsculaAlNorte(letraMayuscula) {
    /*
    PROPÓSITO: Escribe la letra que se encuentra en la celda actual en
        mayúsculas en la celda lindante al Norte.
    PARÁMETROS: letraMayuscula - Número: Indica la codificación ASCII de la letra
        a escribir en la celda lindante al Norte.
    PRECONDICIONES: 
        * La letra debe estar codificada end ASCII.
        * Debe haber al menos una celda lindante al Norte de la celda actual.
        * La celda lindante al norte debe estar vacía.
    OBSERVACIONES: Las letras se representan mediante bolitas negras.
    */
    Mover(Norte)
    Poner_DeColor_(letraMayuscula , Negro)
    Mover(opuesto(Norte))
}

procedure Sacar_DeColor_(cantidadASacar , colorASacar) {
    /*
    PROPÓSITO: Saca *cantidadASacar* bolitas de color *colorASacar* de la
        celda actual.
    PRECONDICIONES: Debe haber como mínimo *cantidadASacar* bolitas de
        color *colorASacar* en la celda actual.
    PARÁMETROS:
        *cantidadASacar - Numero Entero: indica la cantidad de bolitas
            que se quieren extraer de la celda.
        *colorASacar - Color: indica el color de la o las bolitas que quieren
            retirarse de la celda.
    */
    repeat(cantidadASacar) {
        Sacar(colorASacar)
    }
}

procedure Poner_DeColor_(cantidadAPoner , colorAPoner) {
    /*
    PROPÓSITO: Pone *cantidadAPoner* bolitas *colorAPoner* en la celda actual.
    PRECONDICIONES: -
    PARÁMETROS:
        * cantidadAPoner - Numero Entero: indica la cantidad de bolitas
            rojas que se pondrán en la celda actual.
        * colorAPoner - Color: Indica el color de las bolitas que se
            pondrán en la celda actual.
    */
    repeat(cantidadAPoner) {
        Poner(colorAPoner)
    }
}

procedure Mover_VecesAl_(cantidadAMover, direcciónAMover) {
    /*
    PROPÓSITO: Mueve el cabezal *cantidadAMover* unidades al *direcciónAMover*
    PRECONDICIONES: Debe haber al menos *cantidadAMover* celdas al *direcciónAMover*
        de la celda actual.
    PARÁMETROS:
        * cantidadAMover - Numero Entero: representa la cantidad de celdas
            que se me moverá el cabezal.
        * direcciónAMover - Punto Cardinal: indica en qué dirección se
            moverá el cabezal.
    */
    repeat(cantidadAMover) {
        Mover(direcciónAMover)
    }
}